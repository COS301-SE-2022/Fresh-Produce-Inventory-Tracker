// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String?
  passwordSalt String?  @map("password_salt")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user")
  Produce Produce[]
  Image   Image[]
  Scale   Scale[]
  Feedback_Data Feedback_Data[]
}

model Produce {
  id         Int         @default(autoincrement())
  userId     Int         @map("user_id")
  type       ProduceType @map("type")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sellByDate DateTime?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, userId])
  @@map("produce")
}

model Image {
  id        Int      @default(autoincrement())
  userId    Int      @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, userId])
  @@map("image")
}

model Scale {
  id        Int      @default(autoincrement())
  userId    Int      @map("user_id")
  WeightIndividual    Int      @map("weight_Individual")
  WeightTotal    Int      @map("weight_total")
  ProduceType   String?   @map("produce_type")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, userId])
  @@map("scale")
}

model Feedback_Data {
  id        Int      @default(autoincrement())
  userId    Int      @map("user_id")
  stockLevel   String?      @map("stock_level")
  produceType   ProduceType   @map("produce")
  Freshness   Int[]  @map("freshness")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id, userId])
  @@map("feedback_data")
}


enum ProduceType {
  BREAD
  MEAT
  FLOUR
  MILK
}
enum Stock_Level {
  HIGH
  MEDIUM
  LOW
}
